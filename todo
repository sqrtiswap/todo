#!/bin/sh
#
# Copyright (c) 2020 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Error out when something goes wrong before corrupting one of the files.
set -e

reset="\033[0m"

[ -n "$TODO_COLOUR_A" ] \
	&& colourA="$TODO_COLOUR_A" \
	|| colourA="\033[31m"

[ -n "$TODO_COLOUR_B" ] \
	&& colourB="$TODO_COLOUR_B" \
	|| colourB="\033[33m"

[ -n "$TODO_COLOUR_C" ] \
	&& colourC="$TODO_COLOUR_C" \
	|| colourC="\033[32m"

[ -n "$TODO_COLOUR_D" ] \
	&& colourD="$TODO_COLOUR_D" \
	|| colourD="\033[1;34m"

[ -n "$EDITOR" ] || EDITOR="vi"

[ -n "$PAGER" ] || PAGER="less"

TODODIR=${TODODIR:-${HOME}/.todo/}
file_todo=${file_todo:-${TODODIR}/todo.txt}
file_done=${file_done:-${TODODIR}/done.txt}
file_report=${file_report:-${TODODIR}/report.txt}

batch=0
quiet=0
priority=0

date_today=$(date +%Y-%m-%d)

create_task() {
	shift 1 # remove command from $@
	if [ "${priority}" -eq 1 ] ; then
		printf "%s\n" "(${p}) ${date_today} $*" >> "${file_todo}"
	else
		printf "%s\n" "(A) ${date_today} $*" >> "${file_todo}"
	fi
	[ "${quiet}" -eq 1 ] || report_switcher "create"
}

append() {
	if [ -n "$2" ] && [ -n "$3" ] ; then
		line="$2"
		shift 2 # remove command and line number from $*
		printf '%s\n' "${line}"s/$/" $*"/ w | ed -s "${file_todo}"
		[ "${quiet}" -eq 1 ] || report_switcher "append" "${line}"
	fi
}

list_finished() {
	$PAGER "${file_done}"
}

select_done() {
	# Select the tasks that should be marked as completed: In batch mode this
	# iterates through the matches by name since the linenumber changes after
	# each time a task is marked as done. In normal mode it just checks that the
	# provided line number actually corresponds to an existing task.
	if [ "${batch}" -eq 1 ] ; then
		num_to_mdone=$(grep -ci "$2" "${file_todo}")
		i=1
		while [ "$i" -le "${num_to_mdone}" ] ; do
			tasknum=$(grep -ni "$2" "${file_todo}" | awk -F ":" 'NR==1{print $1}')
			mark_done "${tasknum}"
			i=$((i+1))
		done
	else
		num_of_tasks="$(grep -c '' "${file_todo}")"
		if [ -n "$2" ] && [ "$2" -le "${num_of_tasks}" ] ; then
			mark_done "$2"
		else
			printf "%s\n" "Can't mark task $2 as done. There are only ${num_of_tasks} tasks."
		fi
	fi
}

mark_done() {
	# Mark tasks as done. This is never called directly, only via select_done().
	arg="$1"
	printf 'x %s %s\n' "$date_today" "$(printf '%s\n' "${arg}"p q | ed -s "${file_todo}")" >> "${file_done}"
	printf '%s\n' "${arg}d" w | ed -s "${file_todo}"
	[ "${quiet}" -eq 1 ] || report_switcher "mdone"
}

edit_task() {
	$EDITOR "${file_todo}"
}

list_contexts() {
	# List all contexts and count how many tasks have each context.
	projects=$(grep -oh ' @[[:alnum:]_-]*' "${file_todo}" | sort -u)
	for x in ${projects} ; do
		count=$(grep -c "${x}" "${file_todo}")
		printf "%5.5s %s\n" "${count}" "${x}"
	done
}

list_due_dates() {
	# List tasks sorted by their due dates.
	due_dates=$(grep -oh ' due:[[:graph:]]*' "${file_todo}" | sort -u)
	for x in ${due_dates} ; do
		list_tasks "" "${x}" | grep -i "$2"
	done
	# List remaining tasks that don't have a due date.
	no_due_dates=$(grep -v ' due:[[:graph:]]*' "${file_todo}" | grep -ic "$2")
	if [ "${no_due_dates}" -gt 0 ] ; then
		printf "%s\n" "----> Tasks without due dates:"
		list_tasks "" "$2" | grep -v ' due:[[:graph:]]*'
	fi
}

list_projects() {
	# List all projects and count how many tasks are part of a each project.
	contexts=$(grep -oh ' +[[:alnum:]_-]*' "${file_todo}" | sort -u)
	for x in ${contexts} ; do
		count=$(grep -c "${x}" "${file_todo}")
		printf "%5.5s %s\n" "${count}" "${x}"
	done
}

list_tasks() {
	# List tasks sorted first by priority, then alphanumerically.
	# regexp(arg) takes care of case-insensitive matching by checking for every
	# possible combination of upper and lower case characters in the keyword.
	awk -v arg="$2" \
	-v csR="${reset}" \
	-v csA="${colourA}" \
	-v csB="${colourB}" \
	-v csC="${colourC}" \
	-v csD="${colourD}" \
	'function regexp(arg){
		x=tolower(arg)
		y=toupper(arg)
		len=length(arg)
		str=""
		for(i = 1; i <= len ; ++i)
			str=str"[" substr(x,i,1) substr(y,i,1) "]"
			return str
		}
	{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\([E-Z]\)/{cs=csR}
	{if(match($0,regexp(arg))) printf cs"%5s %s\n", NR, $0ce}' \
	"${file_todo}" \
	| sort -k3
}

priority_change() {
	# Change priority of task with line number $2 to $3.
	if [ -n "$2" ] && [ -n "$3" ] ; then
		printf '%s\n' "$2"'s/(.)/('"$3"')/' w | ed -s "${file_todo}"
		[ "${quiet}" -eq 1 ] || report_switcher "priority" "$2"
	fi
}

report() {
	# Create report.txt line: <timestamp> <todo.txt lines> <done.txt lines>
	nr_active=$(grep -c '' "${file_todo}")
	nr_done=$(grep -c '' "${file_done}")
	printf "%s\n" "$(date +%Y-%m-%dT%TZ) ${nr_active} ${nr_done}" >> "${file_report}"
	[ "${quiet}" -eq 1 ] || report_switcher "report"
}

report_switcher() {
	# Called from the other functions to write the appropriate output when a
	# change to one or more of the files was made.
	case $1 in
		append) line="$2" report_coloured ;;
		create) line="$(grep -c '' "${file_todo}")" report_coloured ;;
		mdone) tail -1 "${file_done}" ;;
		priority) line="$2" report_coloured ;;
		report) tail -1 "${file_report}"
	esac
}

report_coloured() {
	# Provide coloured output, only ever called by report_switcher().
	awk -v line="${line}" \
	-v csR="${reset}" \
	-v csA="${colourA}" \
	-v csB="${colourB}" \
	-v csC="${colourC}" \
	-v csD="${colourD}" \
	'{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\([E-Z]\)/{cs=csR}
	{if(NR==line)printf "%5s %s\n", cs NR ce, cs $0 ce}' \
	"${file_todo}"
}

today() {
	# Show only tasks that are either overdue or due today.
	n=0
	# List overdue tasks sorted first by due date, then by priority, then
	# alphanumerically.
	due_dates=$(grep -oh 'due:[[:graph:]]*' "${file_todo}" | sort -u)
	if [ -n "${due_dates}" ] ; then
		for x in ${due_dates} ; do
			if expr "$x" \< "due:$date_today" > /dev/null ; then
				n=$((n+1))
				[ "$n" -eq 1 ] && printf "%s\n" "----> Due urgently/overdue"
				list_tasks "" "${x}" | grep -i "$2"
			fi
		done
	fi
	# List tasks due today sorted first by priority, then alphanumerically.
	due_today=$(grep -c "due:${date_today}" "${file_todo}")
	if [ "${due_today}" -gt 0 ] ; then
		n=$((n+1))
		printf "%s\n" "----> Due today, $(date '+%d %B %Y')"
		list_tasks "" "due:${date_today}" | grep -i "$2"
	fi
	if [ "$n" -eq 0 ] ; then
		printf "%s\n" "Nothing due today! ;)"
	fi
}

usage() { cat << USAGE
${0##*/}(1) version 0.9.7 - simple todo list manager.
usage: ${0##*/}	[-b] [-q] [-d file] [-r file] [-t file]
		[-p priority] command
USAGE
	exit 1
}

set +e

while getopts bd:r:t:p:q arg ; do
	case ${arg} in
		b) batch=1 ;;
		d) file_done="${OPTARG}" ;;
		r) file_report="${OPTARG}" ;;
		t) file_todo="${OPTARG}" ;;
		p) priority=1 && p="${OPTARG}" ;;
		q) quiet=1 ;;
		*) usage
	esac
done
shift $((OPTIND - 1)) # remove flags from indexing

case $1 in
	a*) append "$@" ;;
	c*) create_task "$@" ;;
	d*) select_done "$@" ;;
	e*) edit_task "$@" ;;
	f*) list_finished ;;
	lc) list_contexts ;;
	ld) list_due_dates "$@" ;;
	lp) list_projects ;;
	ls) list_tasks "$@" ;;
	p*) priority_change "$@" ;;
	r*) report ;;
	t*) today "$@" ;;
	*) usage
esac
