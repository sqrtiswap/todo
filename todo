#!/bin/sh
#
# Copyright (c) 2020-2022 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

_reset="\033[0m"

[ -n "$TODO_COLOUR_A" ] \
	&& _colourA="$TODO_COLOUR_A" \
	|| _colourA="\033[31m"

[ -n "$TODO_COLOUR_B" ] \
	&& _colourB="$TODO_COLOUR_B" \
	|| _colourB="\033[33m"

[ -n "$TODO_COLOUR_C" ] \
	&& _colourC="$TODO_COLOUR_C" \
	|| _colourC="\033[32m"

[ -n "$TODO_COLOUR_D" ] \
	&& _colourD="$TODO_COLOUR_D" \
	|| _colourD="\033[1;34m"

[ -n "$EDITOR" ] || EDITOR="vi"

[ -n "$PAGER" ] || PAGER="less"

TODODIR=${TODODIR:-${HOME}/.todo/}
_file_todo=${_file_todo:-${TODODIR}/todo.txt}
_file_done=${_file_done:-${TODODIR}/done.txt}
_file_report=${_file_report:-${TODODIR}/report.txt}

_quiet=0
_priority=0

_date_today=$(date +%F)

create_task() {
	shift 1
	if [ "${_priority}" -eq 1 ] ; then
		echo "(${_p}) ${_date_today}" "$@" >> "${_file_todo}"
	else
		echo "(A) ${_date_today}" "$@" >> "${_file_todo}"
	fi
	[ "${_quiet}" -eq 1 ] \
		|| report_change "create"
}

append() {
	if [ -n "$2" ] && [ -n "$3" ] ; then
		_line="$2"
		shift 2
		printf '%s\n' "${_line}"s/$/" $*"/ w | ed -s "${_file_todo}"
		[ "${_quiet}" -eq 1 ] \
			|| report_change "append" "${_line}"
	fi
}

list_finished() {
	$PAGER "${_file_done}"
}

mark_done() {
	_num_of_tasks="$(grep -c '' "${_file_todo}")"
	if [ -n "$2" ] && [ "$2" -le "${_num_of_tasks}" ] ; then
		arg="$2"
		echo "x ${_date_today}" "$(sed -n "${arg}p" "${_file_todo}")" >> "${_file_done}"
		sed -i "${arg}d" "${_file_todo}"
		[ "${_quiet}" -eq 1 ] \
			|| report_change "mdone"
	else
		echo "Can't mark task $2 as done. There are only ${_num_of_tasks} tasks."
	fi
}

edit_task() {
	$EDITOR "${_file_todo}"
}

list_contexts() {
	_projects=$(grep -oh ' @[[:alnum:]]*' "${_file_todo}" | sort -u)
	for x in ${_projects} ; do
		_count=$(grep -c "${x}" "${_file_todo}")
		printf "%4.4s" "${_count}"
		echo " ${x}"
	done
}

list_due_dates() {
	_due_dates=$(grep -oh ' due:[[:graph:]]*' "${_file_todo}" | sort -u)
	for x in ${_due_dates} ; do
		list_tasks "" "${x}" | grep -i "$2"
	done
	_no_due_dates=$(grep -v ' due:[[:graph:]]*' "${_file_todo}" | grep -c "$2")
	if [ "${_no_due_dates}" -gt 0 ] ; then
		echo "---> Tasks without due dates:"
		list_tasks "" "$2" | grep -v ' due:[[:graph:]]*'
	fi
}

list_projects() {
	_contexts=$(grep -oh ' +[[:alnum:]]*' "${_file_todo}" | sort -u)
	for x in ${_contexts} ; do
		_count=$(grep -c "${x}" "${_file_todo}")
		printf "%4.4s" "${_count}"
		echo " ${x}"
	done
}

list_tasks() {
	awk -v arg="$2" \
	-v csR="${_reset}" \
	-v csA="${_colourA}" \
	-v csB="${_colourB}" \
	-v csC="${_colourC}" \
	-v csD="${_colourD}" \
	'function regexp(arg){
		x=tolower(arg)
		y=toupper(arg)
		len=length(arg)
		str=""
		for(i = 1; i <= len ; ++i)
			str=str"[" substr(x,i,1) substr(y,i,1) "]"
			return str
		}
	{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\([E-Z]\)/{cs=csR} {if(match($0,regexp(arg))) printf cs"%4s %s\n", NR, $0ce}' \
	"${_file_todo}" \
	| sort -k3
}

priority_change() {
	if [ -n "$2" ] && [ -n "$3" ] ; then
		printf '%s\n' "$2"'s/(.)/('"$3"')/' w | ed -s "${_file_todo}"
		[ "${_quiet}" -eq 1 ] \
			|| report_change "priority" "$2"
	fi
}

report() {
	_nr_active=$(grep -c '' "${_file_todo}")
	_nr_done=$(grep -c '' "${_file_done}")
	echo "$(date +%FT%TZ) ${_nr_active} ${_nr_done}" >> "${_file_report}"
	[ "${_quiet}" -eq 1 ] \
		|| report_change "report"
}

report_change() {
	case $1 in
		append) _line="$2" ;;
		create) _line="$(grep -c '' "${_file_todo}")" ;;
		mdone) tail -1 "${_file_done}" ;;
		priority) _line="$2" ;;
		report) tail -1 "${_file_report}"
	esac
	awk -v line="${_line}" \
	-v csR="${_reset}" \
	-v csA="${_colourA}" \
	-v csB="${_colourB}" \
	-v csC="${_colourC}" \
	-v csD="${_colourD}" \
	'{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\([E-Z]\)/{cs=csR}{if(NR==line)printf "%4s %s\n", cs NR ce, cs $0 ce}' \
	"${_file_todo}"
}

today() {
	_due_today=$(grep -c " due:${_date_today}" "${_file_todo}")
	_due_dates=$(grep -oh ' due:[[:graph:]]*' "${_file_todo}" | cut -d ':' -f 2 | sort -u)
	if [ "${_due_today}" -gt 0 ] || [ -n "${_due_dates}" ] ; then
		echo "---> Due today, $(date '+%d %B %Y')"
		list_tasks "" " due:${_date_today}" | grep -i "$2"
		if [ -n "${_due_dates}" ] ; then
			echo "---> Due urgently/overdue"
			for x in ${_due_dates} ; do
				_unix_today=$(date -j -f "%F" "${_date_today}" "+%s")
				_unix_x=$(date -j -f "%F" "${x}" "+%s")
				if [ "${_unix_x}" -lt "${_unix_today}" ] ; then
					list_tasks "" "due:${x}" | grep -i "$2"
				fi
			done
		fi
	else
		echo "Nothing due today! ;)"
	fi
}

usage() { cat << USAGE
${0##*/}(1) version 0.9.3p0 - simple todo list manager.
usage: ${0##*/}	[-q] [-d file] [-r file] [-t file]
		[-p priority] command
USAGE
	exit 1
}

set +e

while getopts d:r:t:p:q arg; do
	case ${arg} in
		d) _file_done="${OPTARG}" ;;
		r) _file_report="${OPTARG}" ;;
		t) _file_todo="${OPTARG}" ;;
		p) _priority=1 && _p="${OPTARG}" ;;
		q) _quiet=1 ;;
		*) usage
	esac
done
shift $((OPTIND - 1))

case $1 in
	a*) append "$@" ;;
	c*) create_task "$@" ;;
	d*) mark_done "$@" ;;
	e*) edit_task "$@" ;;
	f*) list_finished ;;
	lc) list_contexts ;;
	ld) list_due_dates "$@" ;;
	lp) list_projects ;;
	ls) list_tasks "$@" ;;
	p*) priority_change "$@" ;;
	r*) report ;;
	t*) today "$@" ;;
	*) usage
esac
