#!/bin/sh
#
# Copyright (c) 2020, 2021 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

_reset="\033[0m"

[ -n "$TODO_COLOUR_A" ] \
	&& _colourA="$TODO_COLOUR_A" \
	|| _colourA="\033[31m"

[ -n "$TODO_COLOUR_B" ] \
	&& _colourB="$TODO_COLOUR_B" \
	|| _colourB="\033[33m"

[ -n "$TODO_COLOUR_C" ] \
	&& _colourC="$TODO_COLOUR_C" \
	|| _colourC="\033[32m"

[ -n "$TODO_COLOUR_D" ] \
	&& _colourD="$TODO_COLOUR_D" \
	|| _colourD="\033[1;34m"

#TODODIR=${TODODIR:-${HOME}/todo/}

#_verbose=0
#_priority=0

create_task() {
	shift 1 && echo "(A) $(date +%F)" "$@" >> "$TODODIR/todo.txt"
	awk -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}END{printf "%4s %s\n", cs NR ce, cs $0 ce}' "$TODODIR/todo.txt"
}

append() {
	[ "$2" != '' ] && [ "$3" != '' ] && sed -i "$2"'s/$/ '"$3"'/' "$TODODIR/todo.txt" && awk -v pat="$2" -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{if(NR==pat)print cs $0 ce}' "$TODODIR/todo.txt"
}

list_finished() {
	$PAGER "$TODODIR/done.txt"
}

mark_done() {
	_num_of_tasks="$(grep -c '' "$TODODIR"/todo.txt)"
	if [ "$2" != '' ] && [ "$2" -le "${_num_of_tasks}" ] ; then
		pat="$2" && echo "x $(date +%F)" "$(sed -n "${pat}p" "$TODODIR/todo.txt")" >> "$TODODIR/done.txt" && sed -i "${pat}d" "$TODODIR/todo.txt" && tail -1 "$TODODIR/done.txt"
	else
		echo "Can't mark task $2 as done. There are only ${_num_of_tasks} tasks."
	fi
	# different version that removes the priority of the finished task:
	#[ "$2" != '' ] && pat="$2" && echo "x $(date +%F)" "$(sed -e 's/(.) //g;'"${pat}"'q;d' "$TODODIR/todo.txt")" >> "$TODODIR/done.txt" && sed -i "${pat}d" "$TODODIR/todo.txt" && tail -1 "$TODODIR/done.txt"
}

edit_task() {
	$EDITOR "$TODODIR/todo.txt"
}

#list_tasks() {
	#awk -v pat="$2" 'index($0, pat){printf "%4s %s\n", NR, $0}' "$TODODIR/todo.txt" | sort -k2 | awk -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{print cs$0ce}'
#}
	# This version does not currently support case insensitive matching.

# Regular expressions conflict with the identifier + for projects. The above version of list_tasks() fixes this inside of todo(1). But if you want to manipulate the output later with regexp or even search for a term containing the + (e.g. a project like +work) you're gonna run into problems. The following version of list_tasks() is a standard implementation, meaning:
# 1) todo(1) with this second list_tasks() will break when using + as an identifier for projects. USE A DIFFERENT IDENTIFIER.
# 2) When using a different identifier and this second version of list_tasks(), you can manipulate your output with regexp all day long and also search for a full project term (e.g. a project like _work).

list_tasks() {
	awk -v pat="$2" -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR} tolower($0) ~ pat {printf cs"%4s %s\n", NR, $0ce}' "$TODODIR/todo.txt" | sort -i -t '\(' -k2
}

list_contexts() {
	projects=$(grep -oh ' @[[:alnum:]]*' "$TODODIR/todo.txt" | sort -u)
	for x in ${projects} ; do
		count=$(grep -c "${x}" "$TODODIR/todo.txt")
		printf "%4.4s" "${count}"
		echo " ${x}"
	done
}

list_projects() {
	contexts=$(grep -oh ' _[[:alnum:]]*' "$TODODIR/todo.txt" | sort -u)
	for x in ${contexts} ; do
		count=$(grep -c "${x}" "$TODODIR/todo.txt")
		printf "%4.4s" "${count}"
		echo " ${x}"
	done
	# Use the + for the first list_tasks() version.
	# Use something else (like _) for the second version so that the regexp work.
}

priority_change() {
	[ "$2" != '' ] && [ "$3" != '' ] && sed -i "$2"'s/(.)/('"$3"')/' "$TODODIR/todo.txt" && awk -v pat="$2" -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{if(NR==pat)print cs $0 ce}' "$TODODIR/todo.txt"
}

report() {
	echo "$(date +%FT%TZ) $(awk 'END{print NR}' "$TODODIR/todo.txt") $(awk 'END{print NR}' "$TODODIR/done.txt")" >> "$TODODIR/report.txt" && tail -1 "$TODODIR/report.txt"
}

today() {
	due_today=$(grep -c " due:$(date +%F)" "$TODODIR"/todo.txt)
	due_urgent=$(grep -c ' _urgent' "$TODODIR"/todo.txt)
	if [ "${due_today}" != 0 ] ; then
		echo "---> Due today, $(date '+%d %B %Y')"
		list_tasks "" "due:$(date +%F)" | grep -v ' _urgent'
		if [ "${due_urgent}" != 0 ] ; then
			echo "---> Due urgently/overdue"
			list_tasks "" " _urgent"
		fi
	elif [ "${due_today}" = 0 ] && [ "${due_urgent}" != 0 ] ; then
		echo "---> Nothing due today, $(date '+%d %B %Y')"
		echo "---> Due urgently/overdue"
		list_tasks "" " _urgent"
	else
		echo "Nothing due! ;)"
	fi
}

usage() { cat << USAGE
todo(1) version 0.8.3p1 - simple todo list manager.
usage: ${0##*/}	[-v] [-d file] [-r file] [-t file] [-f directory]
		[-p priority] command
USAGE
	exit 1
}

#while getopts d:p:r:t:v arg; do
	#case ${arg} in
		#d) _file_done="${OPTARG}" ;;
		#p) _priority=1 ;;
		#r) _file_report="${OPTARG}" ;;
		#t) _file_todo="${OPTARG}" ;;
		#v) _verbose=1 ;;
		#*) usage
	#esac
#done
#shift $((OPTIND - 1))

#_file_todo=${_file_todo:-${TODODIR}/todo/todo.txt}
#_file_done=${_file_done:-${TODODIR}/todo/done.txt}
#_file_report=${_file_report:-${TODODIR}/todo/report.txt}

case $1 in
	a*) append "$@" ;;
	c*) create_task "$@" ;;
	d*) mark_done "$@" ;;
	e*) edit_task "$@" ;;
	f*) list_finished ;;
	ls) list_tasks "$@" ;;
	lc) list_contexts ;;
	lp) list_projects ;;
	p*) priority_change "$@" ;;
	r*) report ;;
	t*) today ;;
	*) usage
esac
