#!/bin/sh
#
# Copyright (c) 2020, 2021 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

_reset="\033[0m"

[ -n "$TODO_COLOUR_A" ] \
	&& _colourA="$TODO_COLOUR_A" \
	|| _colourA="\033[31m"

[ -n "$TODO_COLOUR_B" ] \
	&& _colourB="$TODO_COLOUR_B" \
	|| _colourB="\033[33m"

[ -n "$TODO_COLOUR_C" ] \
	&& _colourC="$TODO_COLOUR_C" \
	|| _colourC="\033[32m"

[ -n "$TODO_COLOUR_D" ] \
	&& _colourD="$TODO_COLOUR_D" \
	|| _colourD="\033[1;34m"

#TODODIR=${TODODIR:-${HOME}/todo/}

#_verbose=0
#_priority=0

create_task() {
	shift 1 && echo "(A) $(date +%F)" "$@" >> "$TODODIR/todo.txt"
	awk -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}END{printf "%4s %s\n", cs NR ce, cs $0 ce}' "$TODODIR/todo.txt"
}

append() {
	[ "$2" != '' ] && [ "$3" != '' ] && sed -i "$2"'s/$/ '"$3"'/' "$TODODIR/todo.txt" && awk -v pat="$2" -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{if(NR==pat)print cs $0 ce}' "$TODODIR/todo.txt"
}

list_finished() {
	$PAGER "$TODODIR/done.txt"
}

mark_done() {
	_num_of_tasks="$(grep -c '' "$TODODIR"/todo.txt)"
	if [ "$2" != '' ] && [ "$2" -le "${_num_of_tasks}" ] ; then
		pat="$2" && echo "x $(date +%F)" "$(sed -n "${pat}p" "$TODODIR/todo.txt")" >> "$TODODIR/done.txt" && sed -i "${pat}d" "$TODODIR/todo.txt" && tail -1 "$TODODIR/done.txt"
	else
		echo "Can't mark task $2 as done. There are only ${_num_of_tasks} tasks."
	fi
	# different version that removes the priority of the finished task:
	#[ "$2" != '' ] && pat="$2" && echo "x $(date +%F)" "$(sed -e 's/(.) //g;'"${pat}"'q;d' "$TODODIR/todo.txt")" >> "$TODODIR/done.txt" && sed -i "${pat}d" "$TODODIR/todo.txt" && tail -1 "$TODODIR/done.txt"
}

edit_task() {
	$EDITOR "$TODODIR/todo.txt"
}

#list_tasks() {
	#awk -v pat="$2" 'index($0, pat){printf "%4s %s\n", NR, $0}' "$TODODIR/todo.txt" | sort -k2 | awk -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{print cs$0ce}'
#}
	# This version does not currently support case insensitive matching.

# Regular expressions conflict with the identifier + for projects. The above version of list_tasks() fixes this inside of todo(1). But if you want to manipulate the output later with regexp or even search for a term containing the + (e.g. a project like +work) you're gonna run into problems. The following version of list_tasks() is a standard implementation, meaning:
# 1) todo(1) with this second list_tasks() will break when using + as an identifier for projects. USE A DIFFERENT IDENTIFIER.
# 2) When using a different identifier and this second version of list_tasks(), you can manipulate your output with regexp all day long and also search for a full project term (e.g. a project like _work).

list_tasks() {
	awk -v pat="$2" -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR} tolower($0) ~ pat {printf cs"%4s %s\n", NR, $0ce}' "$TODODIR/todo.txt" | sort -i -t '\(' -k2
}

list_contexts() {
	projects=$(grep -oh ' @[[:alnum:]]*' "$TODODIR/todo.txt" | sort -u)
	for x in ${projects} ; do
		count=$(grep -c "${x}" "$TODODIR/todo.txt")
		printf "%4.4s" "${count}"
		echo " ${x}"
	done
}

list_projects() {
	contexts=$(grep -oh ' _[[:alnum:]]*' "$TODODIR/todo.txt" | sort -u)
	for x in ${contexts} ; do
		count=$(grep -c "${x}" "$TODODIR/todo.txt")
		printf "%4.4s" "${count}"
		echo " ${x}"
	done
	# Use the + for the first list_tasks() version.
	# Use something else (like _) for the second version so that the regexp work.
}

priority_change() {
	[ "$2" != '' ] && [ "$3" != '' ] && sed -i "$2"'s/(.)/('"$3"')/' "$TODODIR/todo.txt" && awk -v pat="$2" -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{if(NR==pat)print cs $0 ce}' "$TODODIR/todo.txt"
}

report() {
	echo "$(date +%FT%TZ) $(awk 'END{print NR}' "$TODODIR/todo.txt") $(awk 'END{print NR}' "$TODODIR/done.txt")" >> "$TODODIR/report.txt" && tail -1 "$TODODIR/report.txt"
}

today() {
	due_today=$(grep -c " due:$(date +%F)" "$TODODIR"/todo.txt)
	due_urgent=$(grep -c ' _urgent' "$TODODIR"/todo.txt)
	if [ "${due_today}" != 0 ] ; then
		echo "---> Due today, $(date '+%d %B %Y')"
		list_tasks "" "due:$(date +%F)" | grep -v ' _urgent'
		if [ "${due_urgent}" != 0 ] ; then
			echo "---> Due urgently/overdue"
			list_tasks "" " _urgent"
		fi
	elif [ "${due_today}" = 0 ] && [ "${due_urgent}" != 0 ] ; then
		echo "---> Nothing due today, $(date '+%d %B %Y')"
		echo "---> Due urgently/overdue"
		list_tasks "" " _urgent"
	else
		echo "Nothing due! ;)"
	fi
}

usage() { printf "todo(1) version 0.8.3p1 - simple todo list manager.

=> append [number of task] [text]	- Append [text] to a task.
=> create [text]			- Create a new entry.
=> done [number of task]		- Mark the task as done.
=> edit					- Edit todo.txt in EDITOR.
=> finished				- Show finished items in PAGER.
=> ls					- List current todo list. This only accepts lowercase letters but matches in a case-insensitive manner.
=> lc					- List all contexts currently in use.
=> lp					- List all projects currently active.
=> priority [number of task] [priority]	- Change priority of a task to [priority] (A-Z).
=> report				- Create a report of the day containing the number of active and finished tasks.
=> today				- List all tasks due today and also those marked _urgent.

=> help					- Show this message.
Alternatively read the manpage.

Expected environment variables:
=> EDITOR		- The editor you want to use, when opening todo.txt
=> PAGER		- The pager you want to use, when taking a look at accomplished tasks.
=> TODODIR		- The directory where associated files are stored.

Colours can be specified with environment variables:
TODO_COLOUR_A  - Colour for priority A, defaults to \\\033[31m (\033[31mred\033[0m)
TODO_COLOUR_B  - Colour for priority B, defaults to \\\033[33m (\033[33myellow\033[0m)
TODO_COLOUR_C  - Colour for priority C, defaults to \\\033[32m (\033[32mgreen\033[0m)
TODO_COLOUR_D  - Colour for priority D, defaults to \\\033[1;34m (\033[1;34mlight blue\033[0m)

todo expects your files to be in TODODIR/
	todo.txt	- Current todo list containing active items
	done.txt	- List of finished items
	report.txt	- List of reports

The syntax of todo.txt, specifically the + identifier for projects conflicts with regular expressions in awk. If you want to manipulate the output later on or list full project names, you're gonna have to tweak some of the functions a little - I included some guiding comments.

Since version 0.7 the tweaked list_tasks() function is used, resulting in the project identifier being changed from + to _ (+work -> _work).
"
exit 1
}

#while getopts d:p:r:t:v arg; do
	#case ${arg} in
		#d) _file_done="${OPTARG}" ;;
		#p) _priority=1 ;;
		#r) _file_report="${OPTARG}" ;;
		#t) _file_todo="${OPTARG}" ;;
		#v) _verbose=1 ;;
		#*) usage
	#esac
#done
#shift $((OPTIND - 1))

#_file_todo=${_file_todo:-${TODODIR}/todo/todo.txt}
#_file_done=${_file_done:-${TODODIR}/todo/done.txt}
#_file_report=${_file_report:-${TODODIR}/todo/report.txt}

case $1 in
	a*) append "$@" ;;
	c*) create_task "$@" ;;
	d*) mark_done "$@" ;;
	e*) edit_task "$@" ;;
	f*) list_finished ;;
	ls) list_tasks "$@" ;;
	lc) list_contexts ;;
	lp) list_projects ;;
	p*) priority_change "$@" ;;
	r*) report ;;
	t*) today ;;
	*) usage
esac
