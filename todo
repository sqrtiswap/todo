#!/bin/sh
#
# Copyright (c) 2020, 2021 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

_reset="\033[0m"

[ -n "$TODO_COLOUR_A" ] \
	&& _colourA="$TODO_COLOUR_A" \
	|| _colourA="\033[31m"

[ -n "$TODO_COLOUR_B" ] \
	&& _colourB="$TODO_COLOUR_B" \
	|| _colourB="\033[33m"

[ -n "$TODO_COLOUR_C" ] \
	&& _colourC="$TODO_COLOUR_C" \
	|| _colourC="\033[32m"

[ -n "$TODO_COLOUR_D" ] \
	&& _colourD="$TODO_COLOUR_D" \
	|| _colourD="\033[1;34m"

[ -n "$EDITOR" ] || EDITOR="vi"

[ -n "$PAGER" ] || PAGER="less"

TODODIR=${TODODIR:-${HOME}/.todo/}
_file_todo=${_file_todo:-${TODODIR}/todo.txt}
_file_done=${_file_done:-${TODODIR}/done.txt}
_file_report=${_file_report:-${TODODIR}/report.txt}

_verbose=0
_priority=0

create_task() {
	shift 1
	if [ "${_priority}" = 1 ] ; then
		echo "(${_p}) $(date +%F)" "$@" >> "${_file_todo}"
	else
		echo "(A) $(date +%F)" "$@" >> "${_file_todo}"
	fi
	if [ "${_verbose}" = 1 ] ; then
		report_change "create"
	fi
}

append() {
	if [ -n "$2" ] && [ -n "$3" ] ; then
		_line="$2"
		shift 2
		sed -i "${_line}"'s/$/ '"$*"'/' "${_file_todo}"
		[ "${_verbose}" = 1 ] \
			&& report_change "append" "${_line}"
	fi
}

list_finished() {
	$PAGER "${_file_done}"
}

mark_done() {
	_num_of_tasks="$(grep -c '' "${_file_todo}")"
	if [ -n "$2" ] && [ "$2" -le "${_num_of_tasks}" ] ; then
		arg="$2"
		echo "x $(date +%F)" "$(sed -n "${arg}p" "${_file_todo}")" >> "${_file_done}"
		sed -i "${arg}d" "${_file_todo}"
		[ "${_verbose}" = 1 ] \
			&& report_change "mdone"
	else
		echo "Can't mark task $2 as done. There are only ${_num_of_tasks} tasks."
	fi
}

edit_task() {
	$EDITOR "${_file_todo}"
}

#list_tasks() {
	#awk -v pat="$2" 'index($0, pat){printf "%4s %s\n", NR, $0}' "${_file_todo}" | sort -k2 | awk -v csR="${_reset}" -v csA="${_colourA}" -v csB="${_colourB}" -v csC="${_colourC}" -v csD="${_colourD}" '{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{print cs$0ce}'
#}
	# This version does not currently support case insensitive matching.

# Regular expressions conflict with the identifier + for projects. The above version of list_tasks() fixes this inside of todo(1). But if you want to manipulate the output later with regexp or even search for a term containing the + (e.g. a project like +work) you're gonna run into problems. The following version of list_tasks() is a standard implementation, meaning:
# 1) todo(1) with this second list_tasks() will break when using + as an identifier for projects. USE A DIFFERENT IDENTIFIER.
# 2) When using a different identifier and this second version of list_tasks(), you can manipulate your output with regexp all day long and also search for a full project term (e.g. a project like _work).

list_tasks() {
	awk -v arg="$2" \
	-v csR="${_reset}" \
	-v csA="${_colourA}" \
	-v csB="${_colourB}" \
	-v csC="${_colourC}" \
	-v csD="${_colourD}" \
	'function regexp(arg){
		x=tolower(arg)
		y=toupper(arg)
		len=length(arg)
		str=""
		for(i = 1; i <= len ; ++i)
			str=str"[" substr(x,i,1) substr(y,i,1) "]"
			return str
		}
	{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR} {if(match($0,regexp(arg))) printf cs"%4s %s\n", NR, $0ce}' \
	"${_file_todo}" \
	| sort -i -t '\(' -k2
}

list_contexts() {
	projects=$(grep -oh ' @[[:alnum:]]*' "${_file_todo}" | sort -u)
	for x in ${projects} ; do
		count=$(grep -c "${x}" "${_file_todo}")
		printf "%4.4s" "${count}"
		echo " ${x}"
	done
}

list_projects() {
	contexts=$(grep -oh ' _[[:alnum:]]*' "${_file_todo}" | sort -u)
	#contexts=$(grep -oh ' +[[:alnum:]]*' "${_file_todo}" | sort -u)
	for x in ${contexts} ; do
		count=$(grep -c "${x}" "${_file_todo}")
		printf "%4.4s" "${count}"
		echo " ${x}"
	done
}

priority_change() {
	if [ -n "$2" ] && [ -n "$3" ] ; then
		sed -i "$2"'s/(.)/('"$3"')/' "${_file_todo}"
		[ "${_verbose}" = 1 ] \
			&& report_change "priority" "$2"
	fi
}

report() {
	_nr_active=$(grep -c '' "${_file_todo}")
	_nr_done=$(grep -c '' "${_file_done}")
	echo "$(date +%FT%TZ) ${_nr_active} ${_nr_done}" >> "${_file_report}"
	[ "${_verbose}" = 1 ] \
		&& report_change "report"
}

report_change() {
	case $1 in
		append) _line="$2" ;;
		create) _line="$(grep -c '' "${_file_todo}")" ;;
		mdone) tail -1 "${_file_done}" ;;
		priority) _line="$2" ;;
		report) tail -1 "${_file_report}"
	esac
	awk -v line="${_line}" \
	-v csR="${_reset}" \
	-v csA="${_colourA}" \
	-v csB="${_colourB}" \
	-v csC="${_colourC}" \
	-v csD="${_colourD}" \
	'{ce=csR}/\(A\)/{cs=csA}/\(B\)/{cs=csB}/\(C\)/{cs=csC}/\(D\)/{cs=csD}/\(E\)/{cs=csR}{if(NR==line)printf "%4s %s\n", cs NR ce, cs $0 ce}' \
	"${_file_todo}"
}

today() {
	due_today=$(grep -c " due:$(date +%F)" "${_file_todo}")
	due_urgent=$(grep -c ' _urgent' "${_file_todo}")
	if [ "${due_today}" != 0 ] ; then
		echo "---> Due today, $(date '+%d %B %Y')"
		list_tasks "" "due:$(date +%F)" | grep -v ' _urgent'
		if [ "${due_urgent}" != 0 ] ; then
			echo "---> Due urgently/overdue"
			list_tasks "" " _urgent"
		fi
	elif [ "${due_today}" = 0 ] && [ "${due_urgent}" != 0 ] ; then
		echo "---> Nothing due today, $(date '+%d %B %Y')"
		echo "---> Due urgently/overdue"
		list_tasks "" " _urgent"
	else
		echo "Nothing due today! ;)"
	fi
}

usage() { cat << USAGE
todo(1) version 0.8.3p1 - simple todo list manager.
usage: ${0##*/}	[-v] [-d file] [-r file] [-t file] [-f directory]
		[-p priority] command
USAGE
	exit 1
}

while getopts d:p:r:t:v arg; do
	case ${arg} in
		d) _file_done="${OPTARG}" ;;
		p) _priority=1 && _p="${OPTARG}" ;;
		r) _file_report="${OPTARG}" ;;
		t) _file_todo="${OPTARG}" ;;
		v) _verbose=1 ;;
		*) usage
	esac
done
shift $((OPTIND - 1))

case $1 in
	a*) append "$@" ;;
	c*) create_task "$@" ;;
	d*) mark_done "$@" ;;
	e*) edit_task "$@" ;;
	f*) list_finished ;;
	ls) list_tasks "$@" ;;
	lc) list_contexts ;;
	lp) list_projects ;;
	p*) priority_change "$@" ;;
	r*) report ;;
	t*) today ;;
	*) usage
esac
